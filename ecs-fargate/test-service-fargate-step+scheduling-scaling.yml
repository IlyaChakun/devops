
AWSTemplateFormatVersion: '2010-09-09'
Description: Version 13 Base 6F

Parameters:
  EnvironmentName:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: "The EnvironmentName used namespace all resources to allow different environments (uat, prod, rc)"
  ServiceName:
    Type: String
    Default: test-service
    Description: "A service name with only lowercase letters, numbers and '-'.  Must match the ECR repository."
  DesiredTasks:
    Type: Number
    Default: 1
    Description: "The number of containers that should be run for the service on the E1 ECS."

Conditions:
  ProdEnv: !Equals [ !Ref EnvironmentName, prod ]

Resources:

  ###################################################
  # General Resources
  ###################################################

  # This is an IAM role provides service running in the container to
  # access AWS services.  This is a substitute for passing credentials
  # into the application as config.  The permissions should only allow
  # access to services that the application needs to access. This is
  # added to the ECS Task definition (TaskRoleArn)
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}_${ServiceName}_role_fargate
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ "ecs-tasks.amazonaws.com" ]
            Action: [ "sts:AssumeRole" ]
      Path: /
      Policies:
        - PolicyName: sqs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "sqs:*"
                Resource: "*"

  ###################################################
  # Api Resources
  ###################################################

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-${ServiceName}-fargate
      HealthCheckIntervalSeconds: 30
      UnhealthyThresholdCount: 2
      HealthCheckPath: !Sub "/service/test-get"
      Port: 8080
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}:VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
      TargetType: ip

  ALBServiceRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref "TargetGroup"
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - "/service/*"
      ListenerArn:
        Fn::ImportValue: !Sub ${EnvironmentName}:HttpsListener
      Priority: 145

  TaskApi:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${EnvironmentName}_${ServiceName}_api_task_fargate
      ExecutionRoleArn:
        Fn::ImportValue: !Sub "${EnvironmentName}:TasksExecutionRole"
      TaskRoleArn: !Ref TaskRole
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      # 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
      # 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
      # 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
      # 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
      # 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
      Cpu: 256
      # 0.5GB(512), 1GB(1024), 2GB(2048) - Available cpu values: 256 (.25 vCPU)
      # 1GB(1024), 2GB(2048), 3GB(3072), 4GB(4096) - Available cpu values: 512 (.5 vCPU)
      # 2GB(2048), 3GB(3096), 4GB(4096), 5GB(5120), 6GB(6144), 7GB(7168), 8GB(8192) - Available cpu values: 1024 (1 vCPU)
      # Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
      # Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
      Memory: !If [ ProdEnv, "1GB", ".5GB" ]
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EnvironmentName}-${ServiceName}:latest
          Memory: !If [ ProdEnv, "1024", "512" ]
          PortMappings:
            - ContainerPort: 8080
          Environment:
            - Name: ENVIRONMENT
              Value: !Sub "${EnvironmentName}"
            - Name: AWS_REGION
              Value: !Ref "AWS::Region"
            - Name: FARGATE
              Value: "true"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group:
                Fn::ImportValue: !Sub ${EnvironmentName}:LogGroup # from ecs cluster
              awslogs-stream-prefix: ecs

  # ECS Service that will make sure X number of containers are running on the
  # ECS cluster.
  ServiceApi:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !GetAtt ServiceApi.Name
      Cluster:
        Fn::ImportValue: !Sub ${EnvironmentName}:ClusterName
      LaunchType: FARGATE
      TaskDefinition: !Ref TaskApi
      DesiredCount: !Ref DesiredTasks
      HealthCheckGracePeriodSeconds: 30
      LoadBalancers:
        - TargetGroupArn: !Ref "TargetGroup"
          ContainerPort: 8080
          ContainerName: !Ref ServiceName
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub "${EnvironmentName}:FargateSecurityGroup"
          Subnets:
            - Fn::ImportValue: !Sub ${EnvironmentName}:PrivateSubnetOne
            - Fn::ImportValue: !Sub ${EnvironmentName}:PrivateSubnetTwo

    # Enable autoscaling for the service
  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      ServiceNamespace: 'ecs'
      ScalableDimension: 'ecs:service:DesiredCount'
      ResourceId:
        Fn::Join:
          - '/'
          - - service
            - Fn::ImportValue: !Sub ${EnvironmentName}:ClusterName
            - !GetAtt ServiceApi.Name
      MinCapacity: 2
      MaxCapacity: 26

      ScheduledActions:
        - ScheduledActionName: ScaleUp
          Schedule: cron(10 13 ? * MON-FRI *) #9 10
          ScalableTargetAction:
            MinCapacity: 4
            #MaxCapacity: 4
        - ScheduledActionName: ScaleDown
          Schedule: cron(0 14 * * ? *) # Scaling down can happen everyday so that UTC  10 00
          ScalableTargetAction:
            #MaxCapacity: 2
            MinCapacity: 2

      RoleARN:
        Fn::ImportValue: !Sub ${EnvironmentName}:AutoscalingRole

    # Create scaling policies that describe how to scale the service up and down.
  ScaleDownPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: ScalableTarget
    Properties:
      PolicyName: !Sub scale-${EnvironmentName}-${ServiceName}-down
      PolicyType: StepScaling
      ResourceId:
        Fn::Join:
          - '/'
          - - service
            - Fn::ImportValue: !Sub ${EnvironmentName}:ClusterName
            - !GetAtt ServiceApi.Name
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: 'ecs'
      StepScalingPolicyConfiguration:
        AdjustmentType: 'ChangeInCapacity'
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1
        MetricAggregationType: 'Average'
        Cooldown: 60

  ScaleUpPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: ScalableTarget
    Properties:
      PolicyName: !Sub scale-${EnvironmentName}-${ServiceName}-up
      PolicyType: StepScaling
      ResourceId:
        Fn::Join:
          - '/'
          - - service
            - Fn::ImportValue: !Sub ${EnvironmentName}:ClusterName
            - !GetAtt ServiceApi.Name
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: 'ecs'
      StepScalingPolicyConfiguration:
        AdjustmentType: 'ChangeInCapacity'
        StepAdjustments:
          - MetricIntervalLowerBound: 30
            MetricIntervalUpperBound: 50
            ScalingAdjustment: 2
          - MetricIntervalLowerBound: 50
            MetricIntervalUpperBound: 60
            ScalingAdjustment: 4
          - MetricIntervalLowerBound: 60
            MetricIntervalUpperBound: 80
            ScalingAdjustment: 8
          - MetricIntervalLowerBound: 80
            ScalingAdjustment: 10
        MetricAggregationType: 'Average'
        Cooldown: 60

    # Create alarms to trigger the scaling policies
  LowCpuUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub low-cpu-${EnvironmentName}-${ServiceName}
      AlarmDescription: !Sub "Low CPU utilization for service ${ServiceName} in environment ${EnvironmentName}"
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Dimensions:
        - Name: ServiceName
          Value: !GetAtt ServiceApi.Name
        - Name: ClusterName
          Value:
            Fn::ImportValue: !Sub ${EnvironmentName}:ClusterName
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 20
      ComparisonOperator: LessThanOrEqualToThreshold
      AlarmActions:
        - !Ref ScaleDownPolicy

  HighCpuUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub high-cpu-${EnvironmentName}-${ServiceName}
      AlarmDescription: !Sub "High CPU utilization for service ${ServiceName} in environment ${EnvironmentName}"
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Dimensions:
        - Name: ServiceName
          Value: !GetAtt ServiceApi.Name
        - Name: ClusterName
          Value:
            Fn::ImportValue: !Sub ${EnvironmentName}:ClusterName
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 10
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref ScaleUpPolicy


# These are the values output by the CloudFormation template. Be careful
# about changing any of them, because of them are exported with specific
# names so that the other task related CF templates can use them.
Outputs:
  EcsApiServiceName:
    Description: The name of the service deployed
    Value: !GetAtt 'ServiceApi.Name'
    Export:
      Name: !Sub ${EnvironmentName}:${ServiceName}:ServiceApiFargate
  EcsApiTaskName:
    Description: The name of the task definiton
    Value: !Ref 'TaskApi'
    Export:
      Name: !Sub ${EnvironmentName}:${ServiceName}:TaskApiFargate
  TaskRole:
    Description: The ARN of the ECS role for the container
    Value: !GetAtt 'TaskRole.Arn'
    Export:
      Name: !Sub ${EnvironmentName}:${ServiceName}:TaskRoleFargate